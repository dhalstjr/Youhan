@charset 'utf-8';

body {
  line-height: 1;
}

.navi-skip a {
  position: absolute;
  top: -100%;
  left: 0;
  width: 100%;
  background: #000;
  color: #fff;
  font-weight: 600;
  font-size: 2rem;
  text-align: center;
  line-height: 2rem;
}

/* header CSS */
#header {
  position: fixed;
  top: 0;
  left: 50%;
  width: 100%;
  height: 8.4rem;
  background: #00000020;
  transform: translateX(-50%);

  z-index: 100;
}

#header::before {
  content: "";
  display: block;
  position: absolute;
  top: 84px;
  left: calc(50% - 50vw);
  width: 100vw;
  height: 1px;
  background-color: #fff;
}

/* 넓이를 주기 위해서 한 것 같음 */
.wrap {
  width: 1600px;
  margin: 0 auto;
  position: relative;
}

#header .logo-box {
  position: relative;
  width: 160px;
  /*  line-height: 0; */
  color: transparent;
  font-size: 0;
  z-index: 20;
  line-height: 0;
}

/* #header .logo-box a 로 이미지가 두개로 나옴. */
/* 이유 - <a></a> 태그 내부에 콘텐츠가 들어있음. */
/* 브라우저는 기본적으로 a태그 내부의 콘텐츠를 (텍스트, 요소 등) 표시하려고 함 */
/* background-image로 로고가 들어가면서 , 텍스트도 남아있어 이미지가 두개로 표시 될 경우도 있음/ */
#header .logo-box .logo {
  position: absolute;
  top: 20px;
  left: 0;

  z-index: 20;
  width: 160px;
  height: 64px;
  background-image: url(../img/logo-color.png);
  background-repeat: no-repeat;
  background-position: center;
  background-size: contain;
}

/* 이걸 해야 헤더의 높이가 맞음. */
/* 이 요소들은 기본적으로 헤더 내부에서 특정 높이를 가지고 있을 경우가 큼. */
/* display : none을 사용하면서 공간이 사라짐 */
/* 특히 gnb-top, copy-right가 사라지면서 헤더 높이가 알맞게 맞을 경우가 큼 */
.menu-open,
.gnb-curtain,
.header-copyright,
.gnb-top {
  display: none;
}

/* 서브메뉴 하위 요소들의 부모가 되기 위한 relative */
.depth,
.depth_list,
.depth_item,
.depth_text {
  position: relative;
}

/* depth1 CSS */
.depth1 {
  padding-left: 32rem;
}

.depth1 .depth1-list {
  display: flex;
  width: 96rem;
  padding-top: 2rem;
  justify-content: center;

  /* display : flex 를 사용했지만 내부 요소들이 inline-block 요소를 가지고 있다면 */
  /* font-size에 의해 공백이 생길 수가 있음. 그래서 0으로 설정하면 공백이 제거되면서 요소들이 정확하게 배치 */
  /* gnb(depth_item1) 들이 예상보다 더 벌어지는 문제를 방지할 수 있음.*/
  font-size: 0; /* 요소 간 공백 제거 */
  line-height: 0; /* 불필요한 세로 여백 제거 */
}

.depth1 .depth1-list .depth_item1 {
  width: 16rem;

  position: relative; /* 서브메뉴들의 부모가 되기 위한  */
  vertical-align: top;
}

.depth1 .depth1-list .depth_text1 {
  display: block; /* display : block 을 줘야 text가 center로 간다 이유는 block을 줘야 자신만의 공간을 갖기 떄문인 것 같다. */
  font-size: 2rem;
  color: #000;

  text-align: center;
  line-height: 6.4rem;
  color: white;
}

.option {
  position: absolute;
  top: 30px;
  right: 30px;
}

.option .language .lang_select {
  position: relative;
  border: none;
  font-size: 1.6rem;
  color: white;

  /* 버튼 크기를 위한 padding */
  padding: 1rem 2rem;

  vertical-align: middle;
}
/* 버튼 옆 아이콘 */
.option .language .lang_select::after {
  content: "";
  display: inline-block;
  width: 11px;
  height: 7px;

  margin-left: 4px;
  background-image: url(../img/lang_arrow.svg);
  background-repeat: no-repeat;

  background-size: contain;

  vertical-align: middle;
}

/* 언어 메뉴 서브메뉴 */
.option .language .lang_list {
  position: absolute;
  width: 100%;

  background-color: rgba(255, 255, 255, 0.7);

  /* 하위 메뉴 보이지 않게 */
  visibility: hidden;
  opacity: 0;
}

.option .language .lang_list a {
  display: block;
  width: 100%;

  text-align: center;
  font-size: 1.6rem;
  color: #717171;

  padding: 5px 10px;
}

/* main */
/* sec01 */
#container {
  overflow: hidden;
}

.main .sec01 {
  padding-bottom: 14.3rem;
  position: relative;
}

.main .sec01 .visual-slide {
  /* 화면에 맞게 설정 */
  height: 100vh;
  min-height: 70rem;
  max-height: 108rem;

  position: relative;

  background: #5f5;
}

.main .sec01 .visual-slide .text-box {
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  z-index: 10;

  display: flex;
  align-items: flex-start;
  justify-content: center;
  flex-direction: column;

  text-align: center;

  color: white;
}

.main .sec01 .visual-slide .text-box .holding {
  width: 100%;
  margin-bottom: 2.8rem;

  position: relative;
  font-size: 0;
  height: 8rem;
}

.main .sec01 .visual-slide .text-box .holding .change-on {
  font-size: 8rem;
  font-weight: 700;
  letter-spacing: 0;
  width: 100%;

  position: relative;
  top: 0;
  left: 0;
  display: block;
}

.main .sec01 .visual-slide .text-box .slogan {
  width: 100%;
  font-size: 2rem;
  letter-spacing: 0;
  font-weight: 400;
}

.main .visual-slide .slide-paging {
  position: absolute;
  /* %를 사용하지 않고 px를 사용한 이유는 높이를 고정하기 위해서인 것 같음. */
  /* 반응형웹에서도 일관된 위치를 유지한다. */
  bottom: 70px;
  left: 50%;
  transform: translateX(-50%);

  display: flex;
  z-index: 10;

  /* 본페이지에서는 gap을 사용하지 않고 거리가 간격이 있음. */
  /* inline-block과 letter-spacing을 이용하여 간격을 조정한 방법같음. */
  gap: 4rem;
}

.main .visual-slide .slide-paging li {
  position: relative;
  width: 14rem;
}

.main .visual-slide .slide-paging li button {
  position: absolute;
  bottom: 0;
  width: 100%;
  font-size: 0;
  color: rgba(255, 255, 255, 0.7);
  left: 0;

  cursor: pointer;
}

.main .visual-slide .slide-paging .btn-name {
  display: inline-block;
  width: 100%;
  text-align: center;
  margin-bottom: 1.2rem;
  font-size: 1.8rem;
  font-weight: 300;
}

.main .visual-slide .slide-paging .btn-gage {
  display: inline-block;
  width: 100%;
  height: 2px;
  background: rgba(255, 255, 255, 0.5);
  position: relative;
}

.main .visual-slide .slide-paging .btn-gage .btn-bar {
  display: inline-block;
  position: absolute;
  top: 0;
  left: 0;
  width: auto;
  height: 100%;
  width: 0;
  background-color: white;
}

/* swiper-wrap 메인화면 */
/* 이미지 */
.main .sec01 .visual-slide .slide_item .bg {
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
}

/* 이미지 명도 낮추기 */
/* 내가 사용하는 방법 */
/* .main .sec01 .visual-slide .slide_item .bg:after {
  content: "";
  position: absolute;
  display: block;
  top: 0;
  left: 0;
  right: 0;
  bottom: 0;
  z-index: 0;

  background-color: rgba(0, 0, 0, 0.3);
} */

/* 본페이지에서 사용하는 방식 */
.main .sec01 .visual-slide .slide_item .bg::after {
  content: "";
  position: absolute;
  display: block;
  top: 0;
  left: 0;
  right: 0;
  bottom: 0;
  background: url(../img/blend_main.png) repeat;

  /* 블랜드 모드 */
  /* 필요한 것 - background(배경)이 필요함. , 부모요소가 relative, absolute 이어야 함. */
  mix-blend-mode: multiply;
  /* z-index를 없애야 잘보임 - 본페이지는 z-index : 1로 되어있음음 */
  /* 내가 보기엔 아직 swiper.js을 사용하지 않아서 그럼 */
  z-index: 1;
  opacity: 0.5;
}

.main .sec01 .visual-slide .slide_item img {
  width: 100%;
  height: 100%;
  object-fit: cover;
}

/* main sec02 */
.main .sec02 {
  text-align: center;
  color: #181818;
  margin-bottom: 8.9rem;
}

.main .sec02 .brand-slogan {
  font-size: 4.2rem;
  font-weight: 700;
  /* 본페이지는 margin-bottom을 주는 형식을 했음 */
  margin-bottom: 2.4rem;
}

.main .sec02 .brand-text {
  font-size: 2.4rem;
  font-weight: 400;
  line-height: 3.4rem;
  margin-bottom: 5rem;
}

.main .sec02 .mask-text {
  width: 120rem;
  height: 21rem;
  margin: 0 auto;

  position: relative;
  overflow: hidden;
  font-size: 0; /* 여백 없애기 */

  border-radius: 2rem;
  margin-bottom: 5rem;
}

/* clip-path을 사용한 애니메이션 mask-type */
/* mask-text에 before을 줘서 이미지에 텍스트를 이용해 꾸미기. */
.main .sec02 .mask-text::before {
  content: "YOUHANCARE";
  display: block;
  position: absolute;
  width: 100%;
  height: 100%;
}

/* 공통 CSS 만들기(보여지는 디자인) */
.main .sec02 .mask-text .zoom-circle {
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;

  background-size: cover;
  background-position: center;
  background-repeat: no-repeat;

  background-size: 120rem;
  /* clip-path 사용하기 위한 CSS */
  clip-path: circle(0%);
}

/* clip-path 애니메이션을 위한 on클래스에 CSS 만들기 */
.main .sec02 .mask-text.on .zoom-circle.on {
  clip-path: circle(100%);
  transition: clip-path 1s 800ms ease-out;
}

/* 버튼마다 다른 이미지를 넣기 위해 type1,2,3에 각각의 이미지 넣어주기 */
.main .sec02 .mask-text.type1 .zoom-circle {
  background-image: url(../img/mask-type1.png);
}

.main .sec02 .mask-text.type2 .zoom-circle {
  background-image: url(../img/mask-type2.png);
}

.main .sec02 .mask-text.type3 .zoom-circle {
  background-image: url(../img/mask-type3.png);
}

.main .sec02 .conbox .tab-box {
  width: 100%;
  margin: 0 auto;
  display: flex;
  justify-content: center;
  gap: 2rem;

  margin-bottom: 5rem;
}

.main .sec02 .conbox .tab-box .brand-tab {
  width: 18rem;
  height: 5.8rem;
  border: 1px solid #181818;
  border-radius: 2.9rem;
  font-size: 2.4rem;
  font-weight: 700;

  display: flex;
  align-items: center;
  justify-content: center;
}
.main .sec02 .conbox .tab-box .brand-tab.on {
  background: #181818;
  color: white;
}

.main .sec02 .match-box .match-text {
  font-size: 1.8rem;
  font-weight: 400;
  line-height: 2.6rem;
  margin-bottom: 4rem;
}

/* 맨처음 보여지는 글 */
.main .sec02 .match-box .match-text.active {
}

.main .sec02 .link-box {
  margin-bottom: 8.8rem;
}

.main .sec02 .link-box a {
  font-size: 2.4rem;
  font-weight: 600;
  color: #181818;
  position: relative;

  line-height: 2.4rem;
}

.main .sec02 .link-box a::after {
  content: "";
  display: inline-block;

  width: 0.9rem;
  height: 2.4rem;
  margin-left: 1.2rem;
  vertical-align: top;

  background-image: url(../img/link-arrow.svg);
  background-repeat: no-repeat;
  background-size: contain;
  background-position: center;
}

.main .sec02 .main-banner {
  position: relative;
  overflow: hidden;
}
/* clip-path 사용 애니메이션 */
.main .sec02 .main-banner.on {
}

.main .sec02 .main-banner .bg {
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;

  background: rgba(9, 9, 9, 0.27) url(../img/main-banner-bg01.png) no-repeat
    center / cover;

  /* background로 들어간 건 background-blend-mode로 */
  /* mix-blend-mode: multiply; */
  background-blend-mode: multiply;

  transition: 600ms ease-in-out;
}

.main .sec02 .main-banner:hover .bg {
  transform: scale(1.1);
}

.main .sec02 .main-banner a {
  height: 46rem;
  position: relative;

  display: flex;
  align-items: center;
  justify-content: center;
  text-align: center;
  color: white;

  flex-direction: column;
}

.main .sec02 .main-banner a .banner-name {
  font-weight: 700;
  font-size: 4.2rem;
  line-height: 5.2rem;

  margin-bottom: 2.5rem;
}

.main .sec02 .main-banner a .banner-link {
  font-size: 1.8rem;
  font-weight: 700;

  width: 21rem;
  height: 4rem;
  border: 1px solid white;
  border-radius: 2rem;

  display: flex;
  align-items: center;
  justify-content: center;
}

.main .sec02 .main-banner a .banner-link::after {
  content: "";
  display: inline-block;
  width: 0.9rem;
  height: 1.6rem;
  background: url(../img/link-arror-white.svg) no-repeat center/ contain;
  margin-left: 1.2rem;

  vertical-align: top;
}

/* sec03 시작 정보섹션 */
.main .sec03 {
  position: relative;
}

.main .main-inner {
  width: 120rem;
  margin: 0 auto;

  position: relative;
}

.main .sec03 .news-box {
  margin-bottom: 11.4rem;
}
.main .sec03 .flex-box {
  display: flex;
  align-items: center;
  justify-content: space-between;

  margin-bottom: 5rem;
}
.main .sec03 .flex-box .media-rm {
  font-size: 4.2rem;
  font-weight: 700;
}
.main .sec03 .flex-box .media-rm span {
  font-size: 2.6rem;
  font-weight: 500;
}

.main .sec03 .flex-box .go-media {
  /* 내가 버튼 만드는 방식 */
  /*   width: 18rem;
  height: 4.8rem; */
  border: 1px solid #181818;
  border-radius: 2.4rem;
  font-size: 2rem;
  font-weight: 600;
  line-height: 4.6rem;
  color: #181818;
  padding: 0 17px;

  /*  display: flex;
  align-items: center;
  justify-content: center; */

  /* 본페이지에서 만든 방법 */
}

.main .sec03 .flex-box .go-media::after {
  content: "";
  display: inline-block; /* inline-block으로 해야 한줄로 됨 */
  width: 0.9rem;
  height: 4.6rem;
  background: url(../img/link-arrow.svg) no-repeat center / contain;

  margin-left: 1.2rem;

  vertical-align: top;
}

.main .sec03 .news-conbox {
  font-size: 0;
}

/* flex대신 inline-block을 사용한 이유는 */
/* 1. 줄 바꿈 제어 가능 - inline-block은 한줄에 여러 개 배치되면서도 특정 너비를 유지함 */
/* text-align : center 와 justify-content - space-between 없이 중앙 정렬 가능 */

/* 2. 높이가 자동으로 컨텐츠에 맞춰짐 */
/* inline-block은 각 요소에 내용물에 따라 높이가 다를 수 있음 */
/* 기사(news-title)이 길어지면, 걱 아이템의 높이가 자연스럽게 다를 수 있도록 */
/* 즉, 높이 균일화를 강제하지 않아서, 가변적인 콘텐츠 레이아웃을 만들 때 유리함  */

.main .sec03 .news-conbox .news-list {
  /* flex를 활용한 줄 알았는데 inline-block으로 만듬. */
  /* flex를 사용 시 글이 위로 올라가고 inline-block으로 할 시에는 글이 아래로 내려간다. */
  /*  display: flex;
  justify-content: space-between; */
}

/* width와 height을 따로 준 이유 */
/* .news-item 은 전체 리스트 (news-list)안에서 각 아이템의 너비를 고정하기 위해서. */
/* inline-block을 사용했기에 너비가 없으면 내용물의 크기에 따라 자동으로 조절됨. */
/* 결국, 강제로 너비를 맞춰 동일한 너비를 가지도록 함. */
.main .sec03 .news-conbox .news-list .news-item {
  width: 39rem;
  display: inline-block;
}

/* 형제 선택자 -> .news-item의 뒤에 바로 오는 news-item들에게만 스타일을 적용 */
/* 두번째 요소부터 */
.main .sec03 .news-conbox .news-list .news-item + .news-item {
  margin-left: 1.5rem;
}

.main .sec03 .news-conbox .news-list .news-item a {
  width: 100%;
  display: inline-block;

  color: #181818;
}

.main .sec03 .news-conbox .news-list .news-item .news-thumb {
  height: 30rem;
  border-radius: 2rem;
  margin-bottom: 1rem;
}

.main .sec03 .news-conbox .news-list .news-item .news-thumb img {
  width: 100%;
  height: 100%;
  object-fit: cover;
  object-position: center;

  border-radius: 2rem;
}

.main .sec03 .news-conbox .news-list .news-item .news-title {
  font-size: 2rem;
  font-weight: 500;
  color: #181818;
  line-height: 2rem;

  padding: 0 5px;

  /* 텍스트가 길 때 지정된 영역을 넘어갈 경우 , 한 줄로 유지하면서 ...(말줄임표) 로 표시 */
  white-space: nowrap; /* 줄바꿈없이 한 줄로 유자 */
  overflow: hidden;
  text-overflow: ellipsis; /* 텍스트가 잘릴 경우 ...(말줄임표) 로 표시 */
}

/* hover 효과 */
.link-deco {
  position: absolute;
  bottom: -50px;
  right: -50px;
  width: 100px;
  height: 100px;
  background: rgba(0, 0, 0, 0.5);
  border-radius: 50%;

  /* 위치 보이지 않게  */
  opacity: 0;

  overflow: visible;

  /* 마우스 이벤트 X */
  pointer-events: none;

  transition: 250ms ease;
}

a:hover .link-deco {
  bottom: -30px;
  right: -30px;

  opacity: 1;
  overflow: visible;
}

.link-deco::after {
  content: "";
  display: block;
  width: 30px;
  height: 30px;
  background: url(../img/link-deco.svg) no-repeat center / contain;

  position: absolute;
  /* 정가운데 맞추는 법 */
  /*   top: 50%;
  left: 50%;
  transform: translate(-50%, -50%); */

  top: 25px;
  left: 25px;
}

/* link-deco가 자리 잡을 수 있도록 기준이 되는 부모요소를 잡아주기 위해 */
/* HTML에 link-icon을 설정한 후에 CSS 주기 */
.link-icon {
  position: relative;
  overflow: hidden;
}

/* 유튜브자료 섹션 : grid를 활용한 것 같음 */
.main .sec03 .youtube-box {
  margin-bottom: 15rem;
}
.main .sec03 .youtube-box .youtube-list {
  display: grid;
  gap: 1.5rem;

  /* grid 횔용 행과 열 만들기 */
  /* 2행의 4열이 만들어짐 */

  /* 2개의 행을 만들고 각 행이 동일한 크기로 (1fr) 분배됨 */
  grid-template-rows: repeat(2, 1fr);

  /* 4개의 열을 만들고,각 열이 동일한 크기로 분배 */
  grid-template-columns: repeat(4, 1fr);
}

/* grid 요소들에게 개별 위치 선정  */
/* nth:nth-child() 활용 */
.main .sec03 .youtube-box .youtube-list .youtube-item:nth-child(1) {
  /* grid-area 는 row-start / column-start /row-end / column-end 형태로 작성 */
  /* (1,1) 위치에서 시작 -> (3,3) 위치까지 차지 */
  /* 즉, 첫번쨰 아이템은 2행 2열을 차지 */
  grid-area: 1/1/3/3;
}

/* 1번 아이템만 크기가 크고 나머지 4개는 일정한 크기로 정렬됨 */
.main .sec03 .youtube-box .youtube-list .youtube-item:nth-child(2) {
  grid-area: 1/3/2/4;
}
.main .sec03 .youtube-box .youtube-list .youtube-item:nth-child(3) {
  grid-area: 1/4/2/5;
}
.main .sec03 .youtube-box .youtube-list .youtube-item:nth-child(4) {
  grid-area: 2/3/3/4;
}
.main .sec03 .youtube-box .youtube-list .youtube-item:nth-child(5) {
  grid-area: 2/4/3/5;
}

.main .sec03 .youtube-box .youtube-list .youtube-item {
  /* grid을 활용해 최소 높이 주기 */
  min-height: 23rem;
}

.main .sec03 .youtube-box .youtube-list .youtube-item a {
  display: block;
  width: 100%;
  height: 100%;
  border-radius: 2rem;
}
.main .sec03 .youtube-box .youtube-list .youtube-item a img {
  width: 100%;
  height: 100%;
  border-radius: 2rem;
  object-fit: cover;
  object-position: center;
}
